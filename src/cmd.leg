%{
#define YYSTYPE unsigned long
#include <stdlib.h>
#include <stddef.h>
#include <stdbool.h>

#include "shared.h"
#include "menu.h"

////////// STATE MACHINE //////////
typedef enum jf_cmd_parser_state {
    // make sure to start from 0 so memset init works
    JF_CMD_VALIDATE_START = 0,
    JF_CMD_VALIDATE_ATOMS = 1,
    JF_CMD_VALIDATE_FOLDER = 2,
    JF_CMD_VALIDATE_OK = 3,
    JF_CMD_SPECIAL = 4,
    JF_CMD_SUCCESS = 5,

    JF_CMD_FAIL_FOLDER = -1,
    JF_CMD_FAIL_SYNTAX = -2,
    JF_CMD_FAIL_DISPATCH = -3
} jf_cmd_parser_state;

#define JF_CMD_IS_FAIL(state)   ((state) < 0)
///////////////////////////////////


////////// YY_CTX //////////
// forward declaration wrt PEG generated code
typedef struct _yycontext yycontext;

#define YY_CTX_LOCAL
#define YY_CTX_MEMBERS          \
    jf_cmd_parser_state state;  \
    char *input;                \
    size_t read_input;
////////////////////////////


////////// INPUT PROCESSING //////////
#define YY_INPUT(ctx, buf, result, max_size)                        \
    {                                                               \
        size_t to_read = 0;                                         \
        while (to_read < max_size) {                                \
            if (ctx->input[ctx->read_input + to_read] == '\0') {    \
                break;                                              \
            }                                                       \
            to_read++;                                              \
        }                                                           \
        memcpy(buf, ctx->input + ctx->read_input, to_read);         \
        ctx->read_input += to_read;                                 \
        result = to_read;                                           \
    }
//////////////////////////////////////


////////// FUNCTION PROTOTYPES //////////
jf_cmd_parser_state yy_cmd_get_parser_state(const yycontext *ctx);

static void yy_cmd_digest(yycontext *ctx, const size_t n);
static void yy_cmd_digest_range(yycontext *ctx, size_t l, size_t r);
static void yy_cmd_finalize(yycontext *ctx, const bool parse_ok);
/////////////////////////////////////////
%}


######################################################################################

Start = ( ws*
    ( ".."                      { yy->state = JF_CMD_SPECIAL; jf_menu_dotdot(); }
    | "h"                       { yy->state = JF_CMD_SPECIAL; jf_menu_clear(); }
#   | "r" ws+ @{ yy->state = JF_CMD_RECURSIVE; } Selector ws*
    | "s" ws+ < .+ >        { yy->state = JF_CMD_SPECIAL; jf_menu_search(yytext); }
    | "q"                       { yy->state = JF_CMD_SPECIAL; jf_menu_quit(); }
    | Selector
    ) ws* !.) ~ { yy_cmd_finalize(yy, false); } { yy_cmd_finalize(yy, true); }
Selector = "*"                  { yy_cmd_digest_range(yy, 1, jf_menu_child_count()); }
    | Items
Items = Atom ws* "," ws* Items
    | Atom
Atom = l:num ws* "-" ws* r:num  { yy_cmd_digest_range(yy, l, r); }
    | n:num                     { yy_cmd_digest(yy, n); }
num = < [0-9]+ >                { $$ = strtoul(yytext, NULL, 10); }
ws = [ \t]

######################################################################################


%%
jf_cmd_parser_state yy_cmd_get_parser_state(const yycontext *ctx)
{
    return ctx->state;
}


static void yy_cmd_digest(yycontext *ctx, size_t n)
{
    jf_item_type item_type;

    // no-op on fail state
    if (JF_CMD_IS_FAIL(ctx->state)) {
        return;
    }

    // no-op if item does not exist (out of bounds)
    if ((item_type = jf_menu_child_get_type(n)) == JF_ITEM_TYPE_NONE) {
        return;
    }

    switch (ctx->state) {
        case JF_CMD_VALIDATE_START:
            if (JF_ITEM_TYPE_IS_FOLDER(item_type)) {
                ctx->state = JF_CMD_VALIDATE_FOLDER;
            } else {
                ctx->state = JF_CMD_VALIDATE_ATOMS;
            }
            break;
        case JF_CMD_VALIDATE_ATOMS:
            if (JF_ITEM_TYPE_IS_FOLDER(item_type)) {
                ctx->state = JF_CMD_FAIL_FOLDER;
            }
            break;
        case JF_CMD_VALIDATE_FOLDER:
            ctx->state = JF_CMD_FAIL_FOLDER;
            break;
        case JF_CMD_VALIDATE_OK:
            if (! jf_menu_child_dispatch(n)) {
                ctx->state = JF_CMD_FAIL_DISPATCH;
            }
            break;
        default:
            fprintf(stderr, "Error: yy_cmd_digest: unexpected state transition. This is a bug.\n"); 
            break;
    }
}


static void yy_cmd_digest_range(yycontext *ctx, size_t l, size_t r)
{
    // and now for our next trick: unsigned arithmetic!
    size_t step = l <= r ? 1 : (size_t)-1;
    l = jf_clamp_zu(l, 0, jf_menu_child_count()+1);
    r = jf_clamp_zu(r, 0, jf_menu_child_count()+1);
    while (true) {
        yy_cmd_digest(ctx, l);
        if (l == r) break;
        l += step;
    }
}


static void yy_cmd_finalize(yycontext *ctx, const bool parse_ok)
{
    if (parse_ok == false) {
        ctx->state = JF_CMD_FAIL_SYNTAX;
    } else {
        switch (ctx->state) {
            case JF_CMD_VALIDATE_ATOMS:
            case JF_CMD_VALIDATE_FOLDER:
                ctx->read_input = 0;
                ctx->state = JF_CMD_VALIDATE_OK;
                break;
            case JF_CMD_VALIDATE_OK:
            case JF_CMD_SPECIAL:
            case JF_CMD_VALIDATE_START: // all items out of bounds
                ctx->state = JF_CMD_SUCCESS;
                break;
            case JF_CMD_FAIL_FOLDER:
                break;
            default:
                fprintf(stderr, "Error: yy_cmd_finalize: unexpected state transition. This is a bug.\n");   
        }
    }
}
